name: Deploy to Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_APP_DIR: ${{ secrets.DROPLET_APP_DIR }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          missing=0
          for var in SSH_PRIVATE_KEY DROPLET_HOST DROPLET_USER DROPLET_APP_DIR; do
            if [ -z "${!var}" ]; then
              echo "::error::Missing required secret: $var"
              missing=1
            fi
          done
          if [ -z "${SSH_PASSPHRASE}" ]; then
            echo "::notice::SSH_PASSPHRASE not provided. If your key has a passphrase, add secret SSH_PASSPHRASE."
          fi
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing. Configure them in GitHub → Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Deploy over SSH (supports passphrase)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            APP_DIR=${{ secrets.DROPLET_APP_DIR }}
            REPO_URL=${{ github.server_url }}/${{ github.repository }}.git
            if [ ! -d "$APP_DIR/.git" ]; then
              mkdir -p "$APP_DIR"
              git clone "$REPO_URL" "$APP_DIR"
            fi
            cd "$APP_DIR"
            echo "[INFO] Docker versions on remote:"
            (docker --version && docker compose version) || true
            # Use sudo for docker if necessary
            if ! docker info >/dev/null 2>&1; then
              echo "[INFO] Using sudo for docker"
              DOCKER="sudo docker"
            else
              DOCKER="docker"
            fi
            git fetch --all
            git reset --hard origin/main
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1
            COMPOSE="$DOCKER compose -f docker-compose.yml -f docker-compose.prod.yml"
            # Build & start
            $COMPOSE pull || true
            if ! $COMPOSE build --no-cache --progress=plain; then
              echo "[ERROR] Build failed. Showing last 200 lines of logs for each service (if any)."
              $COMPOSE logs --tail=200 || true
              exit 1
            fi
            if ! $COMPOSE up -d; then
              echo "[ERROR] Up failed. Showing logs..."
              $COMPOSE logs --tail=200 || true
              exit 1
            fi
            $COMPOSE ps
            # Short wait for services to settle
            sleep 5
            # Run migrations with diagnostics on failure
            if ! $COMPOSE exec -T api npm run migrate; then
              echo "Migration failed. Showing recent logs..."
              $COMPOSE logs --tail=200 api || true
              $COMPOSE logs --tail=200 web || true
              $COMPOSE logs --tail=200 proxy || true
              exit 1
            fi
