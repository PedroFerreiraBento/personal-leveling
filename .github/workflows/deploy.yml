name: Deploy to Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check required secrets
        run: |
          missing=0
          # Explicit checks (GitHub Expressions do not allow dynamic indexing in a loop)
          if [ -z "${{ secrets.DROPLET_HOST }}" ]; then echo "Missing secret: DROPLET_HOST"; missing=1; fi
          if [ -z "${{ secrets.DROPLET_USER }}" ]; then echo "Missing secret: DROPLET_USER"; missing=1; fi
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then echo "Missing secret: SSH_PRIVATE_KEY"; missing=1; fi
          if [ -z "${{ secrets.DROPLET_APP_DIR }}" ]; then echo "Missing secret: DROPLET_APP_DIR"; missing=1; else echo "DROPLET_APP_DIR is set (length hidden)"; fi
          if [ -z "${{ secrets.SSH_PASSPHRASE }}" ]; then
            echo "::notice::SSH_PASSPHRASE not provided. If your key has a passphrase, add secret SSH_PASSPHRASE."
          fi
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing. Configure them in GitHub → Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Deploy over SSH (supports passphrase)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            set -eu
            REPO_URL=${{ github.server_url }}/${{ github.repository }}.git
            # Force APP_DIR directly from secret to bypass any env forwarding issues
            APP_DIR="${{ secrets.DROPLET_APP_DIR }}"
            # Minimal debug: POSIX-safe checks (no bash-specific substitutions)
            if [ -n "${APP_DIR:-}" ]; then
              echo "[INFO] APP_DIR provided via env"
            else
              echo "[INFO] APP_DIR empty"
            fi
            # Sanity check
            if [ -z "$APP_DIR" ]; then
              echo "[WARN] APP_DIR not provided via secrets; defaulting to $HOME/personal-leveling"
              APP_DIR="$HOME/personal-leveling"
            fi
            if [ ! -d "$APP_DIR/.git" ]; then
              mkdir -p "$APP_DIR"
              git clone "$REPO_URL" "$APP_DIR"
            fi
            cd "$APP_DIR"
            echo "[INFO] Docker versions on remote:"
            (docker --version && docker compose version) 2>&1 || true
            # Use sudo for docker if necessary (non-interactive)
            if ! docker info >/dev/null 2>&1; then
              echo "[INFO] docker requires sudo. Verifying passwordless sudo..."
              if sudo -n true 2>/dev/null; then
                echo "[INFO] Using sudo -n for docker"
                DOCKER="sudo -n docker"
              else
                echo "[ERROR] Passwordless sudo is not configured for this user. Configure NOPASSWD for docker or add user to docker group, then retry."
                exit 1
              fi
            else
              DOCKER="docker"
            fi
            git fetch --all --prune 2>&1
            git reset --hard origin/main 2>&1
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1
            # Only web and postgres, using base compose (no caddy/prod)
            COMPOSE_FILES="-f docker-compose.yml"
            COMPOSE="$DOCKER compose $COMPOSE_FILES"
            # Build & start only required services
            echo "[INFO] Pulling images (postgres, web) if present..."
            $COMPOSE pull postgres web 2>&1 || true
            echo "[INFO] Building web image..."
            if ! $COMPOSE build --no-cache web; then
              echo "[ERROR] Build failed (service: web). Check the build output above."
              exit 1
            fi
            echo "[INFO] Starting services (postgres, web)..."
            if ! $COMPOSE up -d postgres web; then
              echo "[ERROR] Up failed. Recent service logs:"
              $COMPOSE logs --tail=200 web || true
              $COMPOSE logs --tail=200 postgres || true
              exit 1
            fi
            $COMPOSE ps 2>&1
            echo "[INFO] Deploy finished for services: postgres, web"
