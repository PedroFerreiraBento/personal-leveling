name: Deploy to Droplet

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Materialize secrets into env (without exposing values)
        run: |
          {
            echo "DROPLET_HOST=${{ secrets.DROPLET_HOST }}"
            echo "DROPLET_USER=${{ secrets.DROPLET_USER }}"
            echo "DROPLET_APP_DIR=${{ secrets.DROPLET_APP_DIR }}"
            echo "SSH_PRIVATE_KEY_PRESENT=$([ -n '${{ secrets.SSH_PRIVATE_KEY }}' ] && echo 1 || echo 0)"
          } >> "$GITHUB_ENV"

      - name: Validate required secrets
        shell: bash
        run: |
          set -euo pipefail
          missing=0

          for v in DROPLET_HOST DROPLET_USER DROPLET_APP_DIR; do
            val="${!v:-}"
            if [[ -z "$val" ]]; then
              echo "::error title=Missing secret::$v is EMPTY (check Secrets scope/name)"
              missing=1
            else
              echo "::notice title=Secret present::$v length=${#val}"
            fi
          done

          if [[ "${SSH_PRIVATE_KEY_PRESENT:-0}" != "1" ]]; then
            echo "::error title=Missing secret::SSH_PRIVATE_KEY is EMPTY"
            missing=1
          else
            echo "::notice title=Secret present::SSH_PRIVATE_KEY is set"
          fi

          [[ "$missing" -eq 0 ]]

      - name: Test SSH connectivity
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.DROPLET_HOST }}
          username: ${{ env.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -euo pipefail
            echo "[TEST] Connected to $(hostname)"
            echo "[TEST] whoami: $(whoami)"
            echo "[TEST] uptime: $(uptime)"
            echo "[TEST] pwd: $(pwd)"
            echo "[TEST] Home listing:"
            ls -la ~ || true

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.DROPLET_HOST }}
          username: ${{ env.DROPLET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          envs: DROPLET_APP_DIR
          script: |
            set -euo pipefail

            REPO_URL="${{ github.server_url }}/${{ github.repository }}.git"
            TARGET_DIR="${DROPLET_APP_DIR:-$HOME/personal-leveling}"

            echo "[INFO] TARGET_DIR=$TARGET_DIR"
            mkdir -p "$TARGET_DIR"

            if [ ! -d "$TARGET_DIR/.git" ]; then
              echo "[INFO] Clonando repo em $TARGET_DIR"
              git clone "$REPO_URL" "$TARGET_DIR"
            fi

            cd "$TARGET_DIR"
            echo "[INFO] Atualizando repo"
            git fetch --all --prune
            git reset --hard origin/main

            echo "[INFO] Docker versions on remote:"
            (docker --version && docker compose version) 2>&1 || true

            echo "[INFO] whoami: $(whoami)"
            echo "[INFO] groups: $(id -nG || true)"
            ls -l /var/run/docker.sock || true

            echo "[INFO] Selecting docker invoker..."
            DOCKER_MODE=""
            if docker info >/dev/null 2>&1; then
              DOCKER_MODE="direct"
              echo "[INFO] Using direct docker"
            elif command -v sg >/dev/null 2>&1 && sg docker -c "docker info" >/dev/null 2>&1; then
              DOCKER_MODE="sg"
              echo "[INFO] Using sg docker"
              echo "[INFO] sg groups (debug): $(sg docker -c 'id -nG' || true)"
            elif sudo -n docker info >/dev/null 2>&1; then
              DOCKER_MODE="sudo"
              echo "[INFO] Using sudo -n docker"
            else
              echo "[ERROR] Cannot run docker. Add user to 'docker' group and re-login, or configure sudo NOPASSWD for docker."
              exit 1
            fi

            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1

            if [ -f docker-compose.yml ]; then
              echo "[INFO] Compose found."

              if [ "$DOCKER_MODE" = "sg" ]; then
                sg docker -c "docker compose -f docker-compose.yml pull postgres web" || true
                sg docker -c "docker compose -f docker-compose.yml build web"
                sg docker -c "docker compose -f docker-compose.yml up -d postgres web"
                sg docker -c "docker compose -f docker-compose.yml ps"
              elif [ "$DOCKER_MODE" = "sudo" ]; then
                sudo -n docker compose -f docker-compose.yml pull postgres web || true
                sudo -n docker compose -f docker-compose.yml build web
                sudo -n docker compose -f docker-compose.yml up -d postgres web
                sudo -n docker compose -f docker-compose.yml ps
              else
                docker compose -f docker-compose.yml pull postgres web || true
                docker compose -f docker-compose.yml build web
                docker compose -f docker-compose.yml up -d postgres web
                docker compose -f docker-compose.yml ps
              fi
            else
              echo "[WARN] docker-compose.yml n√£o encontrado em $TARGET_DIR"
            fi

            echo "[INFO] Deploy finished."
