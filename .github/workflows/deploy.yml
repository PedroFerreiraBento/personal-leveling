name: Deploy to Droplet

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate required secrets
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USER: ${{ secrets.DROPLET_USER }}
          DROPLET_APP_DIR: ${{ secrets.DROPLET_APP_DIR }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        run: |
          missing=0
          for var in SSH_PRIVATE_KEY DROPLET_HOST DROPLET_USER DROPLET_APP_DIR; do
            if [ -z "${!var}" ]; then
              echo "::error::Missing required secret: $var"
              missing=1
            fi
          done
          if [ -z "${SSH_PASSPHRASE}" ]; then
            echo "::notice::SSH_PASSPHRASE not provided. If your key has a passphrase, add secret SSH_PASSPHRASE."
          fi
          if [ "$missing" -eq 1 ]; then
            echo "One or more required secrets are missing. Configure them in GitHub → Settings → Secrets and variables → Actions."
            exit 1
          fi

      - name: Install SSH key (supports passphrase)
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # We'll populate known_hosts in the next step via ssh-keyscan
          known_hosts: ""
          if_key_exists: replace
          passphrase: ${{ secrets.SSH_PASSPHRASE }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy over SSH
        env:
          HOST: ${{ secrets.DROPLET_HOST }}
          USER: ${{ secrets.DROPLET_USER }}
          APP_DIR: ${{ secrets.DROPLET_APP_DIR }}
        run: |
          ssh $USER@$HOST << 'EOF'
            set -e
            cd $APP_DIR || (git clone ${{ github.server_url }}/${{ github.repository }}.git $APP_DIR && cd $APP_DIR)
            git fetch --all
            git reset --hard origin/main
            # Create/refresh .env from existing secrets (ensure already present in server)
            # Optionally: echo VAR=... >> .env
            docker compose -f docker-compose.yml -f docker-compose.prod.yml pull || true
            docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            docker compose exec api npm run migrate
          EOF
