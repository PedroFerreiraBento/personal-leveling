services:
  postgres:
    image: postgres:16
    container_name: personal-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app

  caddy:
    image: caddy:2
    container_name: personal-caddy
    restart: unless-stopped
    depends_on:
      - web
      - api
    environment:
      SITE_DOMAIN: ${SITE_DOMAIN}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: personal-api
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      NODE_ENV: production
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL}
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: ${PGDATABASE}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGSSL: "false"
    networks:
      - app

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${PUBLIC_API_URL}
    container_name: personal-web
    restart: unless-stopped
    environment:
      VITE_API_URL: ${PUBLIC_API_URL}
    # Caddy will expose ports 80/443; web stays only on internal network
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - app

networks:
  app:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
